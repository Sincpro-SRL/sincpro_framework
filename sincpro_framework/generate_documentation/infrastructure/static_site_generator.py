"""
Static Site Generator

Complete static site generator for MkDocs with Sincpro theme.
Single API that generates everything needed for `mkdocs build` directly.
"""

import shutil
from pathlib import Path

from sincpro_framework.generate_documentation.domain.models import MkDocsCompleteDocumentation
from sincpro_framework.generate_documentation.infrastructure.mkdocs_yaml_generator import (
    yaml_generator,
)


class StaticSiteGenerator:
    """
    Complete MkDocs static site generator.
    Simple and unified API for generating ready-to-use documentation.
    """

    def generate_site(
        self, documentation: MkDocsCompleteDocumentation, output_dir: str = "generated_docs"
    ) -> str:
        """
        Generate a complete static site ready for MkDocs.

        Args:
            documentation: Complete framework documentation
            output_dir: Output directory

        Returns:
            str: Path to the generated directory
        """
        # Prepare directory
        output_path = self._prepare_output_directory(output_dir)

        # Generate content files (markdown)
        self._write_content_files(documentation, output_path)

        # Generate complete mkdocs.yml
        self._write_mkdocs_config(documentation, output_path)

        # Generate additional files
        self._write_requirements_file(output_path)
        self._write_readme_file(documentation, output_path)
        self._write_sincpro_assets(output_path)

        print(f"✅ Complete static site generated at: {output_path}")
        print(f"📝 Run: cd {output_path} && mkdocs serve")

        return output_path

    def _prepare_output_directory(self, output_dir: str) -> str:
        """Prepare clean output directory"""
        output_path = Path(output_dir).resolve()

        if output_path.exists():
            print(f"🗑️ Cleaning existing directory: {output_path}")
            shutil.rmtree(output_path)

        output_path.mkdir(parents=True, exist_ok=True)
        print(f"📁 Directory prepared: {output_path}")

        return str(output_path)

    def _write_content_files(
        self, documentation: MkDocsCompleteDocumentation, output_path: str
    ) -> None:
        """Write all markdown content files"""
        files = documentation.get_all_files()

        # Remove old navigation file if exists
        files.pop("mkdocs_nav.yml", None)

        for filepath, content in files.items():
            full_path = Path(output_path) / filepath

            # Create subdirectories if needed
            full_path.parent.mkdir(parents=True, exist_ok=True)

            with open(full_path, "w", encoding="utf-8") as f:
                f.write(content)
            print(f"✅ Content: {filepath}")

    def _write_mkdocs_config(
        self, documentation: MkDocsCompleteDocumentation, output_path: str
    ) -> None:
        """Generate complete mkdocs.yml with Sincpro configuration"""
        config_content = yaml_generator.generate_mkdocs_yaml(documentation)
        config_path = Path(output_path) / "mkdocs.yml"

        with open(config_path, "w", encoding="utf-8") as f:
            f.write(config_content)
        print(f"✅ Configuration: mkdocs.yml")

    def _write_requirements_file(self, output_path: str) -> None:
        """Generate requirements.txt for MkDocs"""
        requirements = [
            "mkdocs>=1.5.0",
            "mkdocs-material>=9.0.0",
            "mkdocstrings[python]>=0.20.0",
            "pymdown-extensions>=10.0.0",
            "mkdocs-git-revision-date-localized-plugin>=1.2.0",
            "mkdocs-minify-plugin>=0.7.0",
        ]

        requirements_path = Path(output_path) / "requirements.txt"
        with open(requirements_path, "w", encoding="utf-8") as f:
            f.write("\n".join(requirements))
        print(f"✅ Dependencies: requirements.txt")

    def _write_readme_file(
        self, documentation: MkDocsCompleteDocumentation, output_path: str
    ) -> None:
        """Generate README.md with instructions"""
        frameworks_list = "\n".join(
            [
                f"- **{fw.framework_name}**: `{fw.framework_dir}/`"
                for fw in documentation.frameworks
            ]
        )

        readme_content = f"""# {documentation.main_title}

Auto-generated documentation with Sincpro Framework.

## 🚀 Quick Start

1. **Install dependencies:**
   ```bash
   pip install -r requirements.txt
   ```

2. **Serve locally:**
   ```bash
   mkdocs serve
   ```

3. **Build static site:**
   ```bash
   mkdocs build
   ```

## 📁 Structure

{"This site documents multiple frameworks:" if documentation.is_multi_framework else "This site documents a single framework:"}

{frameworks_list}

## 🎨 Theme

Uses Material theme for MkDocs with Sincpro corporate colors (violet).

---
*Auto-generated by Sincpro Framework*
"""

        readme_path = Path(output_path) / "README.md"
        with open(readme_path, "w", encoding="utf-8") as f:
            f.write(readme_content)
        print(f"✅ Instructions: README.md")

    def _write_sincpro_assets(self, output_path: str) -> None:
        """Generate Sincpro CSS and JS assets"""
        docs_dir = Path(output_path) / "docs"
        assets_dir = docs_dir / "assets"
        css_dir = assets_dir / "css"
        js_dir = assets_dir / "js"

        # Create directories
        css_dir.mkdir(parents=True, exist_ok=True)
        js_dir.mkdir(parents=True, exist_ok=True)

        # Sincpro custom CSS
        sincpro_css = """
/* Sincpro Framework Documentation - Corporate Theme */
:root {
  --sincpro-primary: #6B46C1;
  --sincpro-primary-light: #8B5CF6;
  --sincpro-primary-dark: #553C9A;
  --sincpro-accent: #A78BFA;
  --sincpro-white: #FFFFFF;
}

.md-header {
  background: linear-gradient(135deg, var(--sincpro-primary) 0%, var(--sincpro-primary-light) 100%);
  box-shadow: 0 4px 12px rgba(107, 70, 193, 0.15);
}

.md-header__title {
  color: var(--sincpro-white);
  font-weight: 600;
}

.md-tabs {
  background: var(--sincpro-primary-dark);
}

.md-nav__item .md-nav__link--active {
  color: var(--sincpro-primary);
  font-weight: 600;
}

.md-typeset a {
  color: var(--sincpro-primary);
}

.md-typeset table:not([class]) th {
  background-color: var(--sincpro-primary);
  color: var(--sincpro-white);
}

.sincpro-badge {
  display: inline-block;
  padding: 4px 8px;
  background: linear-gradient(135deg, var(--sincpro-primary) 0%, var(--sincpro-primary-light) 100%);
  color: var(--sincpro-white);
  border-radius: 12px;
  font-size: 0.8em;
  font-weight: 600;
  text-transform: uppercase;
}
"""

        css_path = css_dir / "sincpro-theme.css"
        with open(css_path, "w", encoding="utf-8") as f:
            f.write(sincpro_css)
        print(f"✅ Sincpro CSS: docs/assets/css/sincpro-theme.css")

        # Basic JavaScript
        sincpro_js = """
console.log('🚀 Sincpro Framework Documentation');

document.addEventListener('DOMContentLoaded', function() {
    // Add Sincpro badge to footer
    const footer = document.querySelector('.md-footer-meta__inner');
    if (footer && !footer.querySelector('.sincpro-version')) {
        const badge = document.createElement('span');
        badge.className = 'sincpro-version';
        badge.innerHTML = ' | <span class="sincpro-badge">Sincpro Framework</span>';
        footer.appendChild(badge);
    }
});
"""

        js_path = js_dir / "sincpro-analytics.js"
        with open(js_path, "w", encoding="utf-8") as f:
            f.write(sincpro_js)
        print(f"✅ Sincpro JS: docs/assets/js/sincpro-analytics.js")


# Singleton instance for simple usage
site_generator = StaticSiteGenerator()
